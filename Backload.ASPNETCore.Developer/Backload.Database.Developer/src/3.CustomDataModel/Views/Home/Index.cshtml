@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><![endif]-->
    <!--[if lt IE 9]><script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script><![endif]-->

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom controller with database storage</title>

    <!--  Bootstrap styles -->
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />

    <!-- Style bundle for JQuery File Upload Plugin-->
    <link href="~/Backload/Client/blueimp/bundles/css/jquery.fileupload.bundle.min.css" rel="stylesheet" />

    <!-- Optional: Blueimp image gallery plugin -->
    <link href="~/Backload/Client/blueimp/gallery/css/blueimp-gallery.min.css" rel="stylesheet" />

    <!-- The main application styles -->
    <link href="~/Content/demo.styles.css" rel="stylesheet" />
</head>

<body>
    <div class="container">
        <h1>Database storage</h1>
        <h2 class="lead">Using a custom data model</h2>
        <br>

        <div class="container">
            <blockquote>
                <p>
                    This example uses Entity Framework to store files in a database. Database access is executed through your code
                    in a DbContext class (~/Models/FilesContext.cs). Because you control the communication between your application and the database you can set up a completely different
                    entity (data model, resp. database table). Backload sends and receives files by an IBackloadStorageProviderFile interface.
                <p />
                <p>
                    While in the previous examples we used a data model (resp. table schema) Backload can handle directly,
                    we use a custom data model in this demo. Now we have a different table and column names and an additional column to hold the
                    user id. There is not much change in the entity or context. The entity has become two simple explicit/implicit cast operators.
                    The context class (~/Models/FilesContext.cs) now has a ColumnMapping property which helps to map the default column name to
                    the custom columns. This is all done internally. If you need some adjustments or something fails, just set a breakpoint in
                    your code because all traffic from and to the database go through your context.<br />
                    The Standard Edition (free Edition) of the Database Storage Plugin can handle 50 files. The Professional Editions
                    have no restrictions. Differences between editions can be found <a href="https://github.com/blackcity/backload/wiki/editions" target="_blank">here</a>.
                </p>
                <p>
                    <strong>IMPORTANT NOTE: The demo uses SQL Server LOCALDB. If you have problems <a href="README.txt" target="_blank">read this</a>.</strong>
                </p>
            </blockquote>
            <br>

            <!-- The file upload form used as target for the file upload widget -->
            <form id="fileupload" action="/Backload/FileHandler" method="POST" enctype="multipart/form-data">
                <!-- The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload -->
                <div class="row fileupload-buttonbar">
                    <div class="col-lg-7">
                        <!-- The fileinput-button span is used to style the file input field as button -->
                        <span class="btn btn-success fileinput-button">
                            <i class="glyphicon glyphicon-plus"></i>
                            <span>Add files...</span>
                            <input type="file" name="files[]" multiple>
                        </span>
                        <button type="submit" class="btn btn-primary start">
                            <i class="glyphicon glyphicon-upload"></i>
                            <span>Start upload</span>
                        </button>
                        <button type="reset" class="btn btn-warning cancel">
                            <i class="glyphicon glyphicon-ban-circle"></i>
                            <span>Cancel upload</span>
                        </button>
                        <button type="button" class="btn btn-danger delete">
                            <i class="glyphicon glyphicon-trash"></i>
                            <span>Delete</span>
                        </button>
                        <input type="checkbox" class="toggle">
                        <!-- The global file processing state -->
                        <span class="fileupload-process"></span>
                    </div>
                    <!-- The global progress state -->
                    <div class="col-lg-5 fileupload-progress fade">
                        <!-- The global progress bar -->
                        <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                            <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                        </div>
                        <!-- The extended global progress state -->
                        <div class="progress-extended">&nbsp;</div>
                    </div>
                </div>
                <!-- The table listing the files available for upload/download -->
                <table role="presentation" class="table table-striped"><tbody class="files"></tbody></table>
            </form>
        </div>

        <!-- The template to display files available for upload -->
        <script id="template-upload" type="text/x-tmpl">
            {% for (var i=0, file; file=o.files[i]; i++) { %}
            <tr class="template-upload fade">
                <td>
                    <span class="preview"></span>
                </td>
                <td>
                    <p class="name">{%=file.name%}</p>
                    <strong class="error text-danger"></strong>
                </td>
                <td>
                    <p class="size">Processing...</p>
                    <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
                </td>
                <td>
                    {% if (!i && !o.options.autoUpload) { %}
                    <button class="btn btn-primary start" disabled>
                        <i class="glyphicon glyphicon-upload"></i>
                        <span>Start</span>
                    </button>
                    {% } %}
                    {% if (!i) { %}
                    <button class="btn btn-warning cancel">
                        <i class="glyphicon glyphicon-ban-circle"></i>
                        <span>Cancel</span>
                    </button>
                    {% } %}
                </td>
            </tr>
            {% } %}
        </script>

        <!-- The template to display files available for download -->
        <script id="template-download" type="text/x-tmpl">
            {% for (var i=0, file; file=o.files[i]; i++) { %}
            {% if (!file.extra) file.extra = { originalName: file.name }; %}
            <tr class="template-download fade">
                <td>
                    <span class="preview">
                        {% if (file.thumbnailUrl) { %}
                        <a href="{%=file.url%}" title="{%=file.extra.originalName%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                        {% } %}
                    </span>
                </td>
                <td>
                    <p class="name">
                        {% if (file.url) { %}
                        <a href="{%=file.url%}" title="{%=file.extra.originalName%}" download="{%=file.name%}" {%=file.thumbnailUrl?'data-gallery':''%}>{%=file.extra.originalName%}</a>
                        {% } else { %}
                        <span>{%=file.name%}</span>
                        {% } %}
                    </p>
                    {% if (file.error) { %}
                    <div><span class="label label-danger">Error</span> {%=file.error%}</div>
                    {% } %}
                </td>
                <td>
                    <span class="size">{%=o.formatFileSize(file.size)%}</span>
                </td>
                <td>
                    {% if (file.deleteUrl) { %}
                    <button class="btn btn-danger delete" data-type="{%=file.deleteType%}" data-url="{%=file.deleteUrl%}" {% if (file.deletewithcredentials) { %} data-xhr-fields='{"withCredentials":true}' {% } %}>
                        <i class="glyphicon glyphicon-trash"></i>
                        <span>Delete</span>
                    </button>
                    <input type="checkbox" name="delete" value="1" class="toggle">
                    {% } else { %}
                    <button class="btn btn-warning cancel">
                        <i class="glyphicon glyphicon-ban-circle"></i>
                        <span>Cancel</span>
                    </button>
                    {% } %}
                </td>
            </tr>
            {% } %}
        </script>

        <!-- The blueimp Gallery widget -->
        <div id="blueimp-gallery" class="blueimp-gallery blueimp-gallery-controls" data-filter=":even">
            <div class="slides"></div>
            <h3 class="title"></h3>
            <a class="prev">‹</a>
            <a class="next">›</a>
            <a class="close">×</a>
            <a class="play-pause"></a>
            <ol class="indicator"></ol>
        </div>


        <br>
    </div>

    <!-- jQuery script -->
    <script src="~/Scripts/jquery-2.1.4.min.js"></script>

    <!-- Bootstrap script -->
    <script src="~/Scripts/bootstrap.min.js"></script>

    <!-- Script bundle for the jQquery File Upload Plugin in Basic Plus UI style* -->
    <script src="~/Backload/Client/blueimp/bundles/js/jquery.fileupload.basicplusui.min.js"></script>

    <!-- Optional: Blueimp image gallery plugin -->
    <script src="~/Backload/Client/blueimp/gallery/js/jquery.blueimp-gallery.min.js"></script>

    <!-- The demo application scripts -->
    <script src="~/Scripts/demos.support.uuid.js"></script>
    <script src="~/Scripts/demos.custom.database.js"></script>
</body>
</html>